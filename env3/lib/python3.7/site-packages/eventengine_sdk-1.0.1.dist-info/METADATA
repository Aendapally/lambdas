Metadata-Version: 2.1
Name: eventengine-sdk
Version: 1.0.1
Summary: Event Engine client SDK
Home-page: https://code.amazon.com/packages/EventEngine-PythonSDK
Author: Juan Villa
Author-email: jcv@amazon.com
License: Amazon Proprietary
Platform: UNKNOWN
Requires-Python: >=3.5
Description-Content-Type: text/markdown
Requires-Dist: requests
Requires-Dist: boto3

# Event Engine Python SDK

This is a simple Python SDK for making API calls to the Event Engine control plane. Note that this SDK does NOT support all available API calls, but rather only supports the API calls that Module developers need to make to create interactive content on the Event Engine (e.g. GameDays).

## Getting Started

TODO

## Contributing

This SDK is currently not auto-generated, but will most likely be in the future. In the meantime, if you have any bugfixes or features you'd like to add, please follow the process outlined below to contribute a change. If you have any questions about any of this, please reach out to us at event-engine-pm@amazon.com.

### Pre-Requisites

This SDK is written in Python and targets Python 3.6.X. I recommend you use [`pyenv`](https://github.com/pyenv/pyenv) to install and manage Python versions.

Make sure you have Python 3.6.X installed.

```console
> python --version
Python 3.6.8
```

If you don't have these versions, and have installed `pyenv`, then you can run the following commands to install the correct versions of python in your system:

```console
pyenv install 3.6.8
pyenv default 3.6.8
pyenv shell 3.6.8
```

Install the Python dependencies to build this SDK.

```console
pip install --upgrade setuptools wheel bumpversion
```

### Cloning Repo

Clone this repo using git as follows.

```console
git clone ssh://git.amazon.com/pkg/EventEngine-PythonSDK
cd EventEngine-PythonSDK
```

### Making And Testing Changes

At this point, you can make any of the changes you were planning on making. Once you've made changes, then next step is to make sure that you have tested your changes thoroughly.

The easiest way to test your changes is to open the Python REPL in the SDK directory, import the SDK, then test the functionality you have added. For example:

```console
> python

Python 3.6.8 (default, Feb 11 2019, 11:05:29) 
[GCC 4.2.1 Compatible Apple LLVM 9.0.0 (clang-900.0.39.2)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import eesdk
>>> sdk = eesdk.EESDK("api.eventengine.run", "token", "event_id", "module_id")
>>> sdk.test_my_new_fn()
```

Note that you will need to add the API Token, Event Id, and Module Id from a test event you are running in the Event Engine.

### Done? Time to Contribute It!

Once you've made your changes, the next step is to bump the minor or patch version of the SDK and then cut the Event Engine team a CR.

To bump the version do the following:

```console
bumpversion minor --allow-dirty
```

As a general rule you bump the `minor` version when you have added a new feature, and you bump the `patch` version when you have made a bugfix that does not introduce new functionality. Please do not make any breaking changes, we will not approve CRs with breaking changes.

Finally, you need to commit your changes and make a CR:

```console
git commit -m "added some awesome new feature to the python sdk -- please be descriptive here!"
cr
```

When you run cr, it will output a link to the review. You can fill in any additional information, then set the reviewers (configure as optional please) to:

```text
jcv@amazon.com
andyboss@amazon.com
iscofiel@amazon.com
```

And finally publish your review! We will take a look, and if it looks good we will approve and merge, otherwise we will send it back to you with comments.

Thanks!!


